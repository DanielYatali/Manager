openapi: 3.0.3
info:
  title: manager
  description: manager
  version: 5.0.0-alpha
servers:
  - url: "http://localhost:8681"
x-weos-config:
  basePath:
  database:
    driver: sqlite3
    database: manager.db
components:
  schemas:
    FilterOptions:
      type: object
      properties:
        eq:
          oneOf:
            - type: string
            - type: array
              items:
                type: string
          nullable: false
        lt:
          oneOf:
            - type: string
            - type: array
              items:
                type: string
          nullable: false
        gt:
          oneOf:
            - type: string
            - type: array
              items:
                type: string
          nullable: false
        like:
          oneOf:
            - type: string
            - type: array
              items:
                type: string
          nullable: false
    Job:
      type: object
      properties:
        id:
          type: string
          format: ksuid
        title:
          type: string
        description:
          type: string
      x-identifier:
        - id
    Employee:
      type: object
      properties:
        id:
          type: string
          format: ksuid
        firstName:
          type: string
        lastName:
          type: string
        job:
          type: object
          $ref: "#/components/schemas/Job"
        email:
          type: string
          # unique: true
        dob:
          type: string
        age:
          type: integer
        tasks:
          type: array
          items:
            $ref: "#/components/schemas/Task"
          nullable: true
        logs:
          type: array
          items:
            $ref: "#/components/schemas/Log"
          nullable: true
      x-identifier:
        - id

    Task:
      type: object
      properties:
        id:
          type: string
          format: ksuid
        employees:
          type: array
          items:
            $ref: "#/components/schemas/Employee"
        tableName:
          type: string
        description:
          type: string
        dateTimeCreated:
          type: string
        progress:
          type: integer
        workedTime:
          type: string
          nullable: true
        status:
          type: string
        dateCompleted:
          type: string
          nullable: true
      x-identifier:
        - id
    Log:
      type: object
      properties:
        id:
          type: string
          format: ksuid
        date:
          type: string
        tasksCompleted:
          type: integer
        hourWorked:
          type: integer
      x-identifier:
        - id

paths:
  /jobs:
    get:
      operationId: job.list
      summary: Get a list of Jobs
      responses:
        200:
          description: List of Jobs
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  page:
                    type: integer
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/Job"
    post:
      operationId: job.create
      x-controller: CreateJob
      summary: Create Job
      requestBody:
        description: Job information that is submitted
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Job"
      responses:
        201:
          description: Add Job
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Job"

  /employees:
    get:
      operationId: employee.list
      summary: Get a list of Employees
      responses:
        200:
          description: List of Employees
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  page:
                    type: integer
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/Employee"
    post:
      operationId: employee.create
      summary: Create Employee
      requestBody:
        description: Employee information that is submitted
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Employee"
      responses:
        201:
          description: Add Employee
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Employee"

  /jobs/{id}:
    get:
      operationId: job.view
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      summary: Get job data by id
      responses:
        200:
          description: Get job information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Job"
    put:
      operationId: job.update
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      summary: Update Job Information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Job"
      responses:
        200:
          description: Get Job information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Job"
    delete:
      operationId: job.delete
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      summary: Delete Job
      responses:
        200:
          description: Delete Job

  /employees/{id}:
    get:
      operationId: employee.view
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      summary: Get employee data by id
      responses:
        200:
          description: Get employee information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Employee"
    put:
      operationId: employee.update
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      summary: Update Employee Information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Employee"
      responses:
        200:
          description: Get Employee information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Employee"
    delete:
      operationId: employee.delete
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      summary: Delete Employee
      responses:
        200:
          description: Delete Employee
  /tasks:
    # operationId: task.list
    get:
      operationId: Get Tasks
      summary: Get a list of Tasks
      responses:
        200:
          description: List of Tasks
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  page:
                    type: integer
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/Task"
    post:
      operationId: task.create
      summary: Create task
      requestBody:
        description: Task information that is submitted
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"
      responses:
        201:
          description: Add Task
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
  /tasks/{id}:
    get:
      operationId: task.view
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      summary: Get task data by id
      responses:
        200:
          description: Get task information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
    put:
      operationId: task.update
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      summary: Update Task Information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"
      responses:
        200:
          description: Get Task information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
    delete:
      operationId: task.delete
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      summary: Delete Task
      responses:
        200:
          description: Delete Task

  /log:
    # operationId: log.list
    get:
      operationId: Get Log
      summary: Get a list of Log
      responses:
        200:
          description: List of Log
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  page:
                    type: integer
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/Log"
    post:
      operationId: log.create
      summary: Create log
      requestBody:
        description: Log information that is submitted
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Log"
      responses:
        201:
          description: Add Log
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Log"
  /log/{id}:
    get:
      operationId: log.view
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      summary: Get log data by id
      responses:
        200:
          description: Get log information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Log"
    put:
      operationId: log.update
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      summary: Update Log Information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Log"
      responses:
        200:
          description: Get Log information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Log"
    delete:
      operationId: log.delete
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      summary: Delete Log
      responses:
        200:
          description: Delete Log

  /health:
    get:
      responses:
        200:
          description: Health Endpoint
          content:
            text/html:
              example: |
                <html><body>Health</body></html>
  /:
    get:
      responses:
        200:
          description: Home Endpoint
          content:
            text/html:
              example: |
                <html><body>Hello World</body></html>
